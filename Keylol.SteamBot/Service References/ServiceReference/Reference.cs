//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Keylol.SteamBot.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SteamBotDTO", Namespace="http://schemas.datacontract.org/2004/07/Keylol.Models.DTO")]
    [System.SerializableAttribute()]
    public partial class SteamBotDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OnlineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SteamIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SteamId64Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SteamPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SteamUserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Online {
            get {
                return this.OnlineField;
            }
            set {
                if ((this.OnlineField.Equals(value) != true)) {
                    this.OnlineField = value;
                    this.RaisePropertyChanged("Online");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SteamId {
            get {
                return this.SteamIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SteamIdField, value) != true)) {
                    this.SteamIdField = value;
                    this.RaisePropertyChanged("SteamId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SteamId64 {
            get {
                return this.SteamId64Field;
            }
            set {
                if ((object.ReferenceEquals(this.SteamId64Field, value) != true)) {
                    this.SteamId64Field = value;
                    this.RaisePropertyChanged("SteamId64");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SteamPassword {
            get {
                return this.SteamPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.SteamPasswordField, value) != true)) {
                    this.SteamPasswordField = value;
                    this.RaisePropertyChanged("SteamPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SteamUserName {
            get {
                return this.SteamUserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SteamUserNameField, value) != true)) {
                    this.SteamUserNameField = value;
                    this.RaisePropertyChanged("SteamUserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SteamBotVM", Namespace="http://schemas.datacontract.org/2004/07/Keylol.Models.ViewModels")]
    [System.SerializableAttribute()]
    public partial class SteamBotVM : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> FriendCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> OnlineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SteamIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> FriendCount {
            get {
                return this.FriendCountField;
            }
            set {
                if ((this.FriendCountField.Equals(value) != true)) {
                    this.FriendCountField = value;
                    this.RaisePropertyChanged("FriendCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> Online {
            get {
                return this.OnlineField;
            }
            set {
                if ((this.OnlineField.Equals(value) != true)) {
                    this.OnlineField = value;
                    this.RaisePropertyChanged("Online");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SteamId {
            get {
                return this.SteamIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SteamIdField, value) != true)) {
                    this.SteamIdField = value;
                    this.RaisePropertyChanged("SteamId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatusClaim", Namespace="http://schemas.datacontract.org/2004/07/Keylol.Services.Contracts")]
    public enum StatusClaim : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normal = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Probationer = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDTO", Namespace="http://schemas.datacontract.org/2004/07/Keylol.Models.DTO")]
    [System.SerializableAttribute()]
    public partial class UserDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArticleCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AvatarImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GamerTagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool LockoutEnabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Keylol.SteamBot.ServiceReference.LoginLogDTO LoginLogField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProfilePointBackgroundImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StaffClaimField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusClaimField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Keylol.SteamBot.ServiceReference.SteamBotDTO SteamBotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SteamIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SteamId64Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SteamProfileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SubscriberCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArticleCount {
            get {
                return this.ArticleCountField;
            }
            set {
                if ((this.ArticleCountField.Equals(value) != true)) {
                    this.ArticleCountField = value;
                    this.RaisePropertyChanged("ArticleCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AvatarImage {
            get {
                return this.AvatarImageField;
            }
            set {
                if ((object.ReferenceEquals(this.AvatarImageField, value) != true)) {
                    this.AvatarImageField = value;
                    this.RaisePropertyChanged("AvatarImage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GamerTag {
            get {
                return this.GamerTagField;
            }
            set {
                if ((object.ReferenceEquals(this.GamerTagField, value) != true)) {
                    this.GamerTagField = value;
                    this.RaisePropertyChanged("GamerTag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IdCode {
            get {
                return this.IdCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.IdCodeField, value) != true)) {
                    this.IdCodeField = value;
                    this.RaisePropertyChanged("IdCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool LockoutEnabled {
            get {
                return this.LockoutEnabledField;
            }
            set {
                if ((this.LockoutEnabledField.Equals(value) != true)) {
                    this.LockoutEnabledField = value;
                    this.RaisePropertyChanged("LockoutEnabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Keylol.SteamBot.ServiceReference.LoginLogDTO LoginLog {
            get {
                return this.LoginLogField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginLogField, value) != true)) {
                    this.LoginLogField = value;
                    this.RaisePropertyChanged("LoginLog");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProfilePointBackgroundImage {
            get {
                return this.ProfilePointBackgroundImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ProfilePointBackgroundImageField, value) != true)) {
                    this.ProfilePointBackgroundImageField = value;
                    this.RaisePropertyChanged("ProfilePointBackgroundImage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StaffClaim {
            get {
                return this.StaffClaimField;
            }
            set {
                if ((object.ReferenceEquals(this.StaffClaimField, value) != true)) {
                    this.StaffClaimField = value;
                    this.RaisePropertyChanged("StaffClaim");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusClaim {
            get {
                return this.StatusClaimField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusClaimField, value) != true)) {
                    this.StatusClaimField = value;
                    this.RaisePropertyChanged("StatusClaim");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Keylol.SteamBot.ServiceReference.SteamBotDTO SteamBot {
            get {
                return this.SteamBotField;
            }
            set {
                if ((object.ReferenceEquals(this.SteamBotField, value) != true)) {
                    this.SteamBotField = value;
                    this.RaisePropertyChanged("SteamBot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SteamId {
            get {
                return this.SteamIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SteamIdField, value) != true)) {
                    this.SteamIdField = value;
                    this.RaisePropertyChanged("SteamId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SteamId64 {
            get {
                return this.SteamId64Field;
            }
            set {
                if ((object.ReferenceEquals(this.SteamId64Field, value) != true)) {
                    this.SteamId64Field = value;
                    this.RaisePropertyChanged("SteamId64");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SteamProfileName {
            get {
                return this.SteamProfileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SteamProfileNameField, value) != true)) {
                    this.SteamProfileNameField = value;
                    this.RaisePropertyChanged("SteamProfileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SubscriberCount {
            get {
                return this.SubscriberCountField;
            }
            set {
                if ((this.SubscriberCountField.Equals(value) != true)) {
                    this.SubscriberCountField = value;
                    this.RaisePropertyChanged("SubscriberCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoginLogDTO", Namespace="http://schemas.datacontract.org/2004/07/Keylol.Models.DTO")]
    [System.SerializableAttribute()]
    public partial class LoginLogDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ip {
            get {
                return this.IpField;
            }
            set {
                if ((object.ReferenceEquals(this.IpField, value) != true)) {
                    this.IpField = value;
                    this.RaisePropertyChanged("Ip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ISteamBotCoodinator", CallbackContract=typeof(Keylol.SteamBot.ServiceReference.ISteamBotCoodinatorCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ISteamBotCoodinator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoodinator/AllocateBots", ReplyAction="http://tempuri.org/ISteamBotCoodinator/AllocateBotsResponse")]
        Keylol.SteamBot.ServiceReference.SteamBotDTO[] AllocateBots();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoodinator/AllocateBots", ReplyAction="http://tempuri.org/ISteamBotCoodinator/AllocateBotsResponse")]
        System.Threading.Tasks.Task<Keylol.SteamBot.ServiceReference.SteamBotDTO[]> AllocateBotsAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISteamBotCoodinator/UpdateBots")]
        void UpdateBots(Keylol.SteamBot.ServiceReference.SteamBotVM[] vms);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISteamBotCoodinator/UpdateBots")]
        System.Threading.Tasks.Task UpdateBotsAsync(Keylol.SteamBot.ServiceReference.SteamBotVM[] vms);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISteamBotCoodinator/SetUserStatus")]
        void SetUserStatus(string steamId, Keylol.SteamBot.ServiceReference.StatusClaim status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISteamBotCoodinator/SetUserStatus")]
        System.Threading.Tasks.Task SetUserStatusAsync(string steamId, Keylol.SteamBot.ServiceReference.StatusClaim status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISteamBotCoodinator/SetUserSteamProfileName")]
        void SetUserSteamProfileName(string steamId, string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISteamBotCoodinator/SetUserSteamProfileName")]
        System.Threading.Tasks.Task SetUserSteamProfileNameAsync(string steamId, string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISteamBotCoodinator/DeleteBindingToken")]
        void DeleteBindingToken(string botId, string steamId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISteamBotCoodinator/DeleteBindingToken")]
        System.Threading.Tasks.Task DeleteBindingTokenAsync(string botId, string steamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoodinator/GetCMServer", ReplyAction="http://tempuri.org/ISteamBotCoodinator/GetCMServerResponse")]
        string GetCMServer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoodinator/GetCMServer", ReplyAction="http://tempuri.org/ISteamBotCoodinator/GetCMServerResponse")]
        System.Threading.Tasks.Task<string> GetCMServerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoodinator/GetUserBySteamId", ReplyAction="http://tempuri.org/ISteamBotCoodinator/GetUserBySteamIdResponse")]
        Keylol.SteamBot.ServiceReference.UserDTO GetUserBySteamId(string steamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoodinator/GetUserBySteamId", ReplyAction="http://tempuri.org/ISteamBotCoodinator/GetUserBySteamIdResponse")]
        System.Threading.Tasks.Task<Keylol.SteamBot.ServiceReference.UserDTO> GetUserBySteamIdAsync(string steamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoodinator/GetUsersBySteamIds", ReplyAction="http://tempuri.org/ISteamBotCoodinator/GetUsersBySteamIdsResponse")]
        Keylol.SteamBot.ServiceReference.UserDTO[] GetUsersBySteamIds(string[] steamIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoodinator/GetUsersBySteamIds", ReplyAction="http://tempuri.org/ISteamBotCoodinator/GetUsersBySteamIdsResponse")]
        System.Threading.Tasks.Task<Keylol.SteamBot.ServiceReference.UserDTO[]> GetUsersBySteamIdsAsync(string[] steamIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoodinator/BindSteamUserWithBindingToken", ReplyAction="http://tempuri.org/ISteamBotCoodinator/BindSteamUserWithBindingTokenResponse")]
        bool BindSteamUserWithBindingToken(string code, string botId, string userSteamId, string userSteamProfileName, string userSteamAvatarHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoodinator/BindSteamUserWithBindingToken", ReplyAction="http://tempuri.org/ISteamBotCoodinator/BindSteamUserWithBindingTokenResponse")]
        System.Threading.Tasks.Task<bool> BindSteamUserWithBindingTokenAsync(string code, string botId, string userSteamId, string userSteamProfileName, string userSteamAvatarHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoodinator/BindSteamUserWithLoginToken", ReplyAction="http://tempuri.org/ISteamBotCoodinator/BindSteamUserWithLoginTokenResponse")]
        bool BindSteamUserWithLoginToken(string userSteamId, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoodinator/BindSteamUserWithLoginToken", ReplyAction="http://tempuri.org/ISteamBotCoodinator/BindSteamUserWithLoginTokenResponse")]
        System.Threading.Tasks.Task<bool> BindSteamUserWithLoginTokenAsync(string userSteamId, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISteamBotCoodinator/BroadcastBotOnFriendAdded")]
        void BroadcastBotOnFriendAdded(string botId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISteamBotCoodinator/BroadcastBotOnFriendAdded")]
        System.Threading.Tasks.Task BroadcastBotOnFriendAddedAsync(string botId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISteamBotCoodinatorCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISteamBotCoodinator/RemoveSteamFriend")]
        void RemoveSteamFriend(string botId, string steamId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISteamBotCoodinatorChannel : Keylol.SteamBot.ServiceReference.ISteamBotCoodinator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SteamBotCoodinatorClient : System.ServiceModel.DuplexClientBase<Keylol.SteamBot.ServiceReference.ISteamBotCoodinator>, Keylol.SteamBot.ServiceReference.ISteamBotCoodinator {
        
        public SteamBotCoodinatorClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SteamBotCoodinatorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SteamBotCoodinatorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SteamBotCoodinatorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SteamBotCoodinatorClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public Keylol.SteamBot.ServiceReference.SteamBotDTO[] AllocateBots() {
            return base.Channel.AllocateBots();
        }
        
        public System.Threading.Tasks.Task<Keylol.SteamBot.ServiceReference.SteamBotDTO[]> AllocateBotsAsync() {
            return base.Channel.AllocateBotsAsync();
        }
        
        public void UpdateBots(Keylol.SteamBot.ServiceReference.SteamBotVM[] vms) {
            base.Channel.UpdateBots(vms);
        }
        
        public System.Threading.Tasks.Task UpdateBotsAsync(Keylol.SteamBot.ServiceReference.SteamBotVM[] vms) {
            return base.Channel.UpdateBotsAsync(vms);
        }
        
        public void SetUserStatus(string steamId, Keylol.SteamBot.ServiceReference.StatusClaim status) {
            base.Channel.SetUserStatus(steamId, status);
        }
        
        public System.Threading.Tasks.Task SetUserStatusAsync(string steamId, Keylol.SteamBot.ServiceReference.StatusClaim status) {
            return base.Channel.SetUserStatusAsync(steamId, status);
        }
        
        public void SetUserSteamProfileName(string steamId, string name) {
            base.Channel.SetUserSteamProfileName(steamId, name);
        }
        
        public System.Threading.Tasks.Task SetUserSteamProfileNameAsync(string steamId, string name) {
            return base.Channel.SetUserSteamProfileNameAsync(steamId, name);
        }
        
        public void DeleteBindingToken(string botId, string steamId) {
            base.Channel.DeleteBindingToken(botId, steamId);
        }
        
        public System.Threading.Tasks.Task DeleteBindingTokenAsync(string botId, string steamId) {
            return base.Channel.DeleteBindingTokenAsync(botId, steamId);
        }
        
        public string GetCMServer() {
            return base.Channel.GetCMServer();
        }
        
        public System.Threading.Tasks.Task<string> GetCMServerAsync() {
            return base.Channel.GetCMServerAsync();
        }
        
        public Keylol.SteamBot.ServiceReference.UserDTO GetUserBySteamId(string steamId) {
            return base.Channel.GetUserBySteamId(steamId);
        }
        
        public System.Threading.Tasks.Task<Keylol.SteamBot.ServiceReference.UserDTO> GetUserBySteamIdAsync(string steamId) {
            return base.Channel.GetUserBySteamIdAsync(steamId);
        }
        
        public Keylol.SteamBot.ServiceReference.UserDTO[] GetUsersBySteamIds(string[] steamIds) {
            return base.Channel.GetUsersBySteamIds(steamIds);
        }
        
        public System.Threading.Tasks.Task<Keylol.SteamBot.ServiceReference.UserDTO[]> GetUsersBySteamIdsAsync(string[] steamIds) {
            return base.Channel.GetUsersBySteamIdsAsync(steamIds);
        }
        
        public bool BindSteamUserWithBindingToken(string code, string botId, string userSteamId, string userSteamProfileName, string userSteamAvatarHash) {
            return base.Channel.BindSteamUserWithBindingToken(code, botId, userSteamId, userSteamProfileName, userSteamAvatarHash);
        }
        
        public System.Threading.Tasks.Task<bool> BindSteamUserWithBindingTokenAsync(string code, string botId, string userSteamId, string userSteamProfileName, string userSteamAvatarHash) {
            return base.Channel.BindSteamUserWithBindingTokenAsync(code, botId, userSteamId, userSteamProfileName, userSteamAvatarHash);
        }
        
        public bool BindSteamUserWithLoginToken(string userSteamId, string code) {
            return base.Channel.BindSteamUserWithLoginToken(userSteamId, code);
        }
        
        public System.Threading.Tasks.Task<bool> BindSteamUserWithLoginTokenAsync(string userSteamId, string code) {
            return base.Channel.BindSteamUserWithLoginTokenAsync(userSteamId, code);
        }
        
        public void BroadcastBotOnFriendAdded(string botId) {
            base.Channel.BroadcastBotOnFriendAdded(botId);
        }
        
        public System.Threading.Tasks.Task BroadcastBotOnFriendAddedAsync(string botId) {
            return base.Channel.BroadcastBotOnFriendAddedAsync(botId);
        }
    }
}
