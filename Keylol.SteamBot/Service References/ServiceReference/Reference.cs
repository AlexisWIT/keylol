//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Keylol.SteamBot.ServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatusClaim", Namespace="http://schemas.datacontract.org/2004/07/Keylol.Services.Contracts")]
    public enum StatusClaim : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normal = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Probationer = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ISteamBotCoordinator", CallbackContract=typeof(Keylol.SteamBot.ServiceReference.ISteamBotCoordinatorCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ISteamBotCoordinator {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISteamBotCoordinator/RequestBots")]
        void RequestBots();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoordinator/AllocateBots", ReplyAction="http://tempuri.org/ISteamBotCoordinator/AllocateBotsResponse")]
        Keylol.Models.DTO.SteamBotDto[] AllocateBots(int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoordinator/DeallocateBot", ReplyAction="http://tempuri.org/ISteamBotCoordinator/DeallocateBotResponse")]
        void DeallocateBot(string botId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoordinator/UpdateUser", ReplyAction="http://tempuri.org/ISteamBotCoordinator/UpdateUserResponse")]
        void UpdateUser(string steamId, string profileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoordinator/UpdateBot", ReplyAction="http://tempuri.org/ISteamBotCoordinator/UpdateBotResponse")]
        void UpdateBot(string id, System.Nullable<int> friendCount, System.Nullable<bool> online, string steamId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISteamBotCoordinator/SetUserStatus")]
        void SetUserStatus(string steamId, Keylol.SteamBot.ServiceReference.StatusClaim status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISteamBotCoordinator/DeleteBindingToken")]
        void DeleteBindingToken(string botId, string steamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoordinator/GetUserBySteamId", ReplyAction="http://tempuri.org/ISteamBotCoordinator/GetUserBySteamIdResponse")]
        Keylol.Models.DTO.UserDto GetUserBySteamId(string steamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoordinator/GetUsersBySteamIds", ReplyAction="http://tempuri.org/ISteamBotCoordinator/GetUsersBySteamIdsResponse")]
        Keylol.Models.DTO.UserDto[] GetUsersBySteamIds(string[] steamIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoordinator/BindSteamUserWithBindingToken", ReplyAction="http://tempuri.org/ISteamBotCoordinator/BindSteamUserWithBindingTokenResponse")]
        bool BindSteamUserWithBindingToken(string code, string botId, string userSteamId, string userSteamProfileName, string userSteamAvatarHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoordinator/BindSteamUserWithLoginToken", ReplyAction="http://tempuri.org/ISteamBotCoordinator/BindSteamUserWithLoginTokenResponse")]
        bool BindSteamUserWithLoginToken(string userSteamId, string code);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISteamBotCoordinator/BroadcastBotOnFriendAdded")]
        void BroadcastBotOnFriendAdded(string botId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISteamBotCoordinatorCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoordinator/GetAllocatedBots", ReplyAction="http://tempuri.org/ISteamBotCoordinator/GetAllocatedBotsResponse")]
        string[] GetAllocatedBots();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoordinator/RequestReallocateBots", ReplyAction="http://tempuri.org/ISteamBotCoordinator/RequestReallocateBotsResponse")]
        void RequestReallocateBots(int count);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISteamBotCoordinator/RemoveSteamFriend")]
        void RemoveSteamFriend(string botId, string steamId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISteamBotCoordinator/SendMessage")]
        void SendMessage(string botId, string steamId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISteamBotCoordinator/FetchUrl", ReplyAction="http://tempuri.org/ISteamBotCoordinator/FetchUrlResponse")]
        string FetchUrl(string botId, string url);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISteamBotCoordinatorChannel : Keylol.SteamBot.ServiceReference.ISteamBotCoordinator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SteamBotCoordinatorClient : System.ServiceModel.DuplexClientBase<Keylol.SteamBot.ServiceReference.ISteamBotCoordinator>, Keylol.SteamBot.ServiceReference.ISteamBotCoordinator {
        
        public SteamBotCoordinatorClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SteamBotCoordinatorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SteamBotCoordinatorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SteamBotCoordinatorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SteamBotCoordinatorClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RequestBots() {
            base.Channel.RequestBots();
        }
        
        public Keylol.Models.DTO.SteamBotDto[] AllocateBots(int count) {
            return base.Channel.AllocateBots(count);
        }
        
        public void DeallocateBot(string botId) {
            base.Channel.DeallocateBot(botId);
        }
        
        public void UpdateUser(string steamId, string profileName) {
            base.Channel.UpdateUser(steamId, profileName);
        }
        
        public void UpdateBot(string id, System.Nullable<int> friendCount, System.Nullable<bool> online, string steamId) {
            base.Channel.UpdateBot(id, friendCount, online, steamId);
        }
        
        public void SetUserStatus(string steamId, Keylol.SteamBot.ServiceReference.StatusClaim status) {
            base.Channel.SetUserStatus(steamId, status);
        }
        
        public void DeleteBindingToken(string botId, string steamId) {
            base.Channel.DeleteBindingToken(botId, steamId);
        }
        
        public Keylol.Models.DTO.UserDto GetUserBySteamId(string steamId) {
            return base.Channel.GetUserBySteamId(steamId);
        }
        
        public Keylol.Models.DTO.UserDto[] GetUsersBySteamIds(string[] steamIds) {
            return base.Channel.GetUsersBySteamIds(steamIds);
        }
        
        public bool BindSteamUserWithBindingToken(string code, string botId, string userSteamId, string userSteamProfileName, string userSteamAvatarHash) {
            return base.Channel.BindSteamUserWithBindingToken(code, botId, userSteamId, userSteamProfileName, userSteamAvatarHash);
        }
        
        public bool BindSteamUserWithLoginToken(string userSteamId, string code) {
            return base.Channel.BindSteamUserWithLoginToken(userSteamId, code);
        }
        
        public void BroadcastBotOnFriendAdded(string botId) {
            base.Channel.BroadcastBotOnFriendAdded(botId);
        }
    }
}
